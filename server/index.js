import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const app = express();

// Basic CORS (you can tighten later by origin)
app.use(cors());
app.use(bodyParser.json());

// Health check (helps you + Render verify it's up)
app.get("/", (_req, res) => {
  res.status(200).send("OK");
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ---- Chat route ----
app.post("/chat", async (req, res) => {
  try {
    const { messages = [] } = req.body;

    // Only include last 10 user messages for history
    const history = messages
      .filter((m) => m.role === "user")
      .slice(-10)
      .map((m) => ({
        role: "user",
        parts: [{ text: m.content }],
      }));

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const chat = model.startChat({ history });

    const lastUser = history[history.length - 1]?.parts?.[0]?.text || "";
    const result = await chat.sendMessage(`Answer briefly (max 4 lines): ${lastUser}`);
    const reply = result?.response?.text() || "No reply";

    res.json({ reply });
  } catch (e) {
    console.error("Chat error:", e);
    res.status(500).json({ reply: "Server error. Try again." });
  }
});

// ---- Analyze route ----
async function generateWithRetry(model, prompt, retries = 3, delay = 2000) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const result = await model.generateContent(prompt);
      return result;
    } catch (error) {
      if (error.status === 503 && attempt < retries) {
        await new Promise((r) => setTimeout(r, delay));
      } else {
        throw error;
      }
    }
  }
}

app.post("/analyze", async (req, res) => {
  try {
    const { code } = req.body;
    if (!code) return res.status(400).json({ error: "No code provided" });

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const prompt = `
Analyze the following code and explain briefly.
Return this exact structure:

Time Complexity: <Big-O>
Space Complexity: <Big-O>
Why: <2-3 line explanation with only relevant points>

Code:
${code}
    `;

    const result = await generateWithRetry(model, prompt, 3, 2000);
    const responseText = result?.response?.text() || "";
    if (!responseText.trim()) {
      return res.json({ explanation: "No content generated by Gemini." });
    }
    res.json({ explanation: responseText });
  } catch (error) {
    console.error("❌ Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});
