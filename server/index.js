import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);


// --- NEW: Chat route ---
app.post('/chat', async (req, res) => {
  try {
    const { messages = [] } = req.body;

    // Only include previous user prompts in history
    const history = messages
      .filter((m) => m.role === 'user')
      .slice(-10)   // keep last 10 only
      .map((m) => ({
        role: 'user',
        parts: [{ text: m.content }],
      }));

    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const chat = model.startChat({ history });

    const lastUserMessage = history[history.length - 1]?.parts[0]?.text || "";
    const result = await chat.sendMessage(
      `Answer briefly (max 4 lines): ${lastUserMessage}`
    );
    const reply = result?.response?.text() || 'No reply';

    res.json({ reply });
  } catch (e) {
    console.error('Chat error:', e);
    res.status(500).json({ reply: 'Server error. Try again.' });
  }
});



// Helper function for retry logic
async function generateWithRetry(model, prompt, retries = 3, delay = 2000) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`⚡ Attempt ${attempt} to call Gemini API...`);
      const result = await model.generateContent(prompt);
      return result;
    } catch (error) {
      if (error.status === 503 && attempt < retries) {
        console.warn(`🚧 503 Service Unavailable — retrying in ${delay / 1000}s...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
      } else {
        throw error; // rethrow if not 503 or retries exhausted
      }
    }
  }
}

app.post("/analyze", async (req, res) => {
  try {
    const { code } = req.body;

    if (!code) {
      return res.status(400).json({ error: "No code provided" });
    }

    console.log("✅ Received code for analysis");

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const prompt = `
    Analyze the following code and explain in brief its time and space complexity.
    Give a clear and structured output with:
    - Heading for Time Complexity (bold)
    - Heading for Space Complexity (bold)
    - Short explanation (only relevant details)
    ${code}
    `;

    const result = await generateWithRetry(model, prompt, 3, 2000);

    const responseText = result?.response?.text() || "";

    if (!responseText.trim()) {
      return res.json({ explanation: "No content generated by Gemini." });
    }

    res.json({ explanation: responseText });
  } catch (error) {
    console.error("❌ Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});
